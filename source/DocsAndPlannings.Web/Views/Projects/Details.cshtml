@model DocsAndPlannings.Web.ViewModels.Projects.ProjectDetailsViewModel
@{
    ViewData["Title"] = Model.Project.Name;
}

<div class="row">
    <div class="col-md-12">
        <div class="d-flex justify-content-between align-items-start mb-4">
            <div class="flex-grow-1">
                <div class="d-flex align-items-center gap-2 mb-2">
                    <h2 class="mb-0">@Model.Project.Name</h2>
                    <span class="badge bg-secondary">@Model.Project.Key</span>
                    @if (Model.Project.IsArchived)
                    {
                        <span class="badge bg-secondary">Archived</span>
                    }
                    else if (Model.Project.IsActive)
                    {
                        <span class="badge bg-success">Active</span>
                    }
                    else
                    {
                        <span class="badge bg-warning">Inactive</span>
                    }
                </div>
                <div class="text-muted">
                    <i class="bi bi-person"></i> @Model.Project.OwnerName
                    <span class="mx-2">|</span>
                    <i class="bi bi-calendar"></i> Created @Model.Project.CreatedAt.ToString("MMM dd, yyyy")
                    <span class="mx-2">|</span>
                    <i class="bi bi-clock"></i> Updated @Model.Project.UpdatedAt.ToString("MMM dd, yyyy")
                </div>
            </div>
            <div class="btn-group">
                @if (Model.CanEdit)
                {
                    <a asp-action="Edit" asp-route-id="@Model.Project.Id" class="btn btn-primary">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                }
                @if (Model.CanDelete)
                {
                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                }
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Back
                </a>
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(Model.Project.Description))
{
    <div class="row">
        <div class="col-md-12">
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title"><i class="bi bi-info-circle"></i> Description</h5>
                    <p class="card-text">@Model.Project.Description</p>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-md-3 mb-4">
        <div class="card text-center">
            <div class="card-body">
                <h3 class="text-primary mb-0">@Model.Project.EpicCount</h3>
                <p class="text-muted mb-0">Epics</p>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-4">
        <div class="card text-center">
            <div class="card-body">
                <h3 class="text-info mb-0">@Model.Project.WorkItemCount</h3>
                <p class="text-muted mb-0">Work Items</p>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="bi bi-diagram-2"></i> Epics (@Model.Epics.Count)</h5>
                <a asp-controller="Epics" asp-action="Create" asp-route-projectId="@Model.Project.Id" class="btn btn-sm btn-primary">
                    <i class="bi bi-plus-circle"></i> New Epic
                </a>
            </div>
            @if (Model.Epics.Any())
            {
                <div class="list-group list-group-flush">
                    @foreach (var epic in Model.Epics)
                    {
                        <a asp-controller="Epics" asp-action="Details" asp-route-id="@epic.Id"
                           class="list-group-item list-group-item-action">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="flex-grow-1">
                                    <div class="fw-bold">@epic.Summary</div>
                                    <small class="text-muted">@epic.Key</small>
                                </div>
                                <div>
                                    @await Html.PartialAsync("_PriorityBadge", epic.Priority)
                                </div>
                            </div>
                        </a>
                    }
                </div>
            }
            else
            {
                <div class="card-body">
                    <p class="text-muted mb-0">No epics yet. Create your first epic to organize work items.</p>
                </div>
            }
        </div>
    </div>

    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="bi bi-list-task"></i> Recent Work Items</h5>
                <a asp-controller="WorkItems" asp-action="Create" asp-route-projectId="@Model.Project.Id" class="btn btn-sm btn-primary">
                    <i class="bi bi-plus-circle"></i> New Work Item
                </a>
            </div>
            @if (Model.RecentWorkItems.Any())
            {
                <div class="list-group list-group-flush">
                    @foreach (var workItem in Model.RecentWorkItems)
                    {
                        <a asp-controller="WorkItems" asp-action="Details" asp-route-id="@workItem.Id"
                           class="list-group-item list-group-item-action">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="flex-grow-1">
                                    <div class="d-flex align-items-center gap-2">
                                        @await Html.PartialAsync("_WorkItemTypeBadge", workItem.Type)
                                        <span class="fw-bold">@workItem.Summary</span>
                                    </div>
                                    <small class="text-muted">@workItem.Key</small>
                                </div>
                                <div>
                                    @await Html.PartialAsync("_PriorityBadge", workItem.Priority)
                                </div>
                            </div>
                        </a>
                    }
                </div>
            }
            else
            {
                <div class="card-body">
                    <p class="text-muted mb-0">No work items yet. Create work items to track tasks and bugs.</p>
                </div>
            }
        </div>
    </div>
</div>

@* Delete Confirmation Modal *@
@if (Model.CanDelete)
{
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteModalLabel">
                        <i class="bi bi-exclamation-triangle"></i> Confirm Deletion
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this project?</p>
                    <p class="fw-bold">@Model.Project.Name (@Model.Project.Key)</p>
                    <p class="text-danger">
                        <i class="bi bi-exclamation-circle"></i>
                        This will delete all associated epics, work items, and data. This action cannot be undone!
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <form asp-action="Delete" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@Model.Project.Id" />
                        <button type="submit" class="btn btn-danger">
                            <i class="bi bi-trash"></i> Delete Project
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}
