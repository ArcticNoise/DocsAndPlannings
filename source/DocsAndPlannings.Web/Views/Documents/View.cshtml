@model DocsAndPlannings.Web.ViewModels.Documents.DocumentViewerViewModel
@{
    ViewData["Title"] = Model.Document.Title;
}

<div class="row">
    <div class="col-md-12">
        <div class="d-flex justify-content-between align-items-start mb-4">
            <div class="flex-grow-1">
                <div class="d-flex align-items-center gap-2 mb-2">
                    <h2 class="mb-0">@Model.Document.Title</h2>
                    <span class="badge bg-secondary">v@Model.Document.CurrentVersion</span>
                    @if (Model.Document.IsPublished)
                    {
                        <span class="badge bg-success"><i class="bi bi-check-circle"></i> Published</span>
                    }
                    else
                    {
                        <span class="badge bg-warning"><i class="bi bi-pencil"></i> Draft</span>
                    }
                </div>
                <div class="text-muted">
                    <i class="bi bi-person"></i> @Model.Document.AuthorName
                    <span class="mx-2">|</span>
                    <i class="bi bi-calendar"></i> Created @Model.Document.CreatedAt.ToString("MMM dd, yyyy")
                    <span class="mx-2">|</span>
                    <i class="bi bi-clock"></i> Updated @Model.Document.UpdatedAt.ToString("MMM dd, yyyy HH:mm")
                </div>
                @if (Model.Document.Tags.Any())
                {
                    <div class="mt-2">
                        @foreach (var tag in Model.Document.Tags)
                        {
                            <span class="badge bg-info me-1" style="@(tag.Color != null ? $"background-color: {tag.Color} !important;" : "")">
                                <i class="bi bi-tag"></i> @tag.Name
                            </span>
                        }
                    </div>
                }
            </div>
            <div class="btn-group">
                @if (Model.CanEdit)
                {
                    <a asp-action="Edit" asp-route-id="@Model.Document.Id" class="btn btn-primary">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                }
                <button type="button" class="btn btn-secondary" onclick="window.print()">
                    <i class="bi bi-printer"></i> Print
                </button>
                @if (Model.CanDelete)
                {
                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                }
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Back
                </a>
            </div>
        </div>
    </div>
</div>

@* Breadcrumb for hierarchical documents *@
@if (Model.ParentDocument != null)
{
    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a asp-action="Index">Documents</a>
            </li>
            <li class="breadcrumb-item">
                <a asp-action="View" asp-route-id="@Model.ParentDocument.Id">@Model.ParentDocument.Title</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Document.Title</li>
        </ol>
    </nav>
}

<div class="row">
    <div class="col-md-9">
        @* Document Content *@
        <div class="card mb-4">
            <div class="card-body document-content">
                <div id="markdown-content">
                    @Html.Raw(Model.RenderedContent)
                </div>
            </div>
        </div>

        @* Attachments *@
        @if (Model.Attachments.Any())
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-paperclip"></i> Attachments (@Model.Attachments.Count)</h5>
                </div>
                <div class="card-body">
                    <div class="list-group">
                        @foreach (var attachment in Model.Attachments)
                        {
                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <i class="bi bi-file-image"></i>
                                    <strong>@attachment.FileName</strong>
                                    <br />
                                    <small class="text-muted">
                                        @((attachment.FileSizeBytes / 1024.0).ToString("F2")) KB
                                        - Uploaded by @attachment.UploadedByName
                                        on @attachment.UploadedAt.ToString("MMM dd, yyyy")
                                    </small>
                                </div>
                                <div class="btn-group btn-group-sm">
                                    <a href="/api/documents/@Model.Document.Id/attachments/@attachment.Id"
                                       class="btn btn-outline-primary" target="_blank" title="View">
                                        <i class="bi bi-eye"></i>
                                    </a>
                                    <a href="/api/documents/@Model.Document.Id/attachments/@attachment.Id"
                                       download="@attachment.FileName" class="btn btn-outline-secondary" title="Download">
                                        <i class="bi bi-download"></i>
                                    </a>
                                    @if (Model.CanEdit)
                                    {
                                        <form asp-action="DeleteAttachment" method="post" class="d-inline"
                                              onsubmit="return confirm('Are you sure you want to delete this attachment?');">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="documentId" value="@Model.Document.Id" />
                                            <input type="hidden" name="attachmentId" value="@attachment.Id" />
                                            <button type="submit" class="btn btn-outline-danger" title="Delete">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </form>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        @* Upload Attachment *@
        @if (Model.CanEdit)
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-cloud-upload"></i> Upload Screenshot/Attachment</h5>
                </div>
                <div class="card-body">
                    <div id="upload-area" class="border border-2 border-dashed rounded p-4 text-center">
                        <i class="bi bi-cloud-upload fs-1 text-muted"></i>
                        <p class="mb-2">Drag and drop files here, or click to select</p>
                        <input type="file" id="file-input" accept=".jpg,.jpeg,.png,.gif,.webp,.bmp"
                               class="d-none" />
                        <button type="button" class="btn btn-primary" onclick="document.getElementById('file-input').click()">
                            <i class="bi bi-folder2-open"></i> Select File
                        </button>
                        <p class="text-muted small mt-2 mb-0">
                            Maximum file size: 10 MB<br />
                            Allowed formats: JPG, PNG, GIF, WebP, BMP
                        </p>
                    </div>
                    <div id="upload-progress" class="mt-3 d-none">
                        <div class="progress">
                            <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated"
                                 role="progressbar" style="width: 0%"></div>
                        </div>
                        <p class="text-center mt-2 mb-0" id="upload-status">Uploading...</p>
                    </div>
                </div>
            </div>
        }
    </div>

    @* Sidebar *@
    <div class="col-md-3">
        @* Child Documents *@
        @if (Model.ChildDocuments.Any())
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h6 class="mb-0"><i class="bi bi-diagram-3"></i> Child Documents</h6>
                </div>
                <div class="list-group list-group-flush">
                    @foreach (var child in Model.ChildDocuments)
                    {
                        <a asp-action="View" asp-route-id="@child.Id"
                           class="list-group-item list-group-item-action">
                            <i class="bi bi-file-text"></i> @child.Title
                        </a>
                    }
                </div>
            </div>
        }

        @* Quick Actions *@
        <div class="card mb-3">
            <div class="card-header">
                <h6 class="mb-0"><i class="bi bi-lightning"></i> Quick Actions</h6>
            </div>
            <div class="list-group list-group-flush">
                <a asp-action="Create" asp-route-parentDocumentId="@Model.Document.Id"
                   class="list-group-item list-group-item-action">
                    <i class="bi bi-plus-circle"></i> Add Child Document
                </a>
                @if (Model.Document.CurrentVersion > 1)
                {
                    <button type="button" class="list-group-item list-group-item-action"
                            onclick="alert('Version history feature coming soon!')">
                        <i class="bi bi-clock-history"></i> View Version History
                    </button>
                }
                <button type="button" class="list-group-item list-group-item-action"
                        onclick="copyToClipboard(window.location.href)">
                    <i class="bi bi-link-45deg"></i> Copy Link
                </button>
            </div>
        </div>
    </div>
</div>

@* Delete Confirmation Modal *@
@if (Model.CanDelete)
{
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteModalLabel">
                        <i class="bi bi-exclamation-triangle"></i> Confirm Deletion
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this document?</p>
                    <p class="fw-bold">@Model.Document.Title</p>
                    <p class="text-danger">
                        <i class="bi bi-exclamation-circle"></i>
                        This action cannot be undone!
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <form asp-action="Delete" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@Model.Document.Id" />
                        <button type="submit" class="btn btn-danger">
                            <i class="bi bi-trash"></i> Delete Document
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        // File upload handling
        document.addEventListener('DOMContentLoaded', function() {
            const fileInput = document.getElementById('file-input');
            const uploadArea = document.getElementById('upload-area');
            const uploadProgress = document.getElementById('upload-progress');
            const progressBar = document.getElementById('progress-bar');
            const uploadStatus = document.getElementById('upload-status');

            if (fileInput && uploadArea) {
                // File input change handler
                fileInput.addEventListener('change', function(e) {
                    if (this.files && this.files[0]) {
                        uploadFile(this.files[0]);
                    }
                });

                // Drag and drop handlers
                uploadArea.addEventListener('dragover', function(e) {
                    e.preventDefault();
                    uploadArea.classList.add('border-primary');
                });

                uploadArea.addEventListener('dragleave', function(e) {
                    e.preventDefault();
                    uploadArea.classList.remove('border-primary');
                });

                uploadArea.addEventListener('drop', function(e) {
                    e.preventDefault();
                    uploadArea.classList.remove('border-primary');

                    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
                        uploadFile(e.dataTransfer.files[0]);
                    }
                });
            }

            // Upload file function
            function uploadFile(file) {
                // Validate file
                const maxSize = 10 * 1024 * 1024; // 10 MB
                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/bmp'];

                if (file.size > maxSize) {
                    window.DocsAndPlannings.FlashMessage.show('File size exceeds 10 MB limit', 'error');
                    return;
                }

                if (!allowedTypes.includes(file.type)) {
                    window.DocsAndPlannings.FlashMessage.show('Invalid file type. Only images are allowed.', 'error');
                    return;
                }

                // Show progress
                uploadArea.classList.add('d-none');
                uploadProgress.classList.remove('d-none');

                // Create FormData
                const formData = new FormData();
                formData.append('file', file);

                // Upload with progress tracking
                const xhr = new XMLHttpRequest();

                xhr.upload.addEventListener('progress', function(e) {
                    if (e.lengthComputable) {
                        const percentComplete = (e.loaded / e.total) * 100;
                        progressBar.style.width = percentComplete + '%';
                        uploadStatus.textContent = 'Uploading... ' + Math.round(percentComplete) + '%';
                    }
                });

                xhr.addEventListener('load', function() {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        window.DocsAndPlannings.FlashMessage.show('File uploaded successfully', 'success');
                        setTimeout(function() {
                            window.location.reload();
                        }, 1000);
                    } else {
                        window.DocsAndPlannings.FlashMessage.show('Upload failed: ' + xhr.statusText, 'error');
                        resetUploadArea();
                    }
                });

                xhr.addEventListener('error', function() {
                    window.DocsAndPlannings.FlashMessage.show('Upload failed', 'error');
                    resetUploadArea();
                });

                xhr.open('POST', '/api/documents/@Model.Document.Id/attachments');
                xhr.send(formData);
            }

            function resetUploadArea() {
                uploadArea.classList.remove('d-none');
                uploadProgress.classList.add('d-none');
                progressBar.style.width = '0%';
                fileInput.value = '';
            }

            // Copy to clipboard function
            window.copyToClipboard = function(text) {
                navigator.clipboard.writeText(text).then(function() {
                    window.DocsAndPlannings.FlashMessage.show('Link copied to clipboard', 'success');
                }).catch(function() {
                    window.DocsAndPlannings.FlashMessage.show('Failed to copy link', 'error');
                });
            };
        });
    </script>
}

<style>
    .document-content {
        font-size: 1.1rem;
        line-height: 1.8;
    }

    .document-content h1,
    .document-content h2,
    .document-content h3,
    .document-content h4,
    .document-content h5,
    .document-content h6 {
        margin-top: 1.5rem;
        margin-bottom: 1rem;
    }

    .document-content pre {
        background-color: #f5f5f5;
        padding: 1rem;
        border-radius: 0.25rem;
        overflow-x: auto;
    }

    .document-content code {
        background-color: #f5f5f5;
        padding: 0.2rem 0.4rem;
        border-radius: 0.25rem;
        font-size: 0.9em;
    }

    #upload-area {
        cursor: pointer;
        transition: all 0.3s ease;
    }

    #upload-area:hover {
        background-color: #f8f9fa;
    }

    #upload-area.border-primary {
        background-color: #e7f1ff;
    }

    @@media print {
        .btn-group,
        .card-header,
        .breadcrumb,
        #upload-area,
        .sidebar {
            display: none !important;
        }

        .document-content {
            margin: 0;
            padding: 0;
        }
    }
</style>
