@model DocsAndPlannings.Web.ViewModels.Epics.EpicDetailsViewModel
@{
    ViewData["Title"] = Model.Epic.Key;
}

<div class="row">
    <div class="col-md-12">
        <div class="d-flex justify-content-between align-items-start mb-4">
            <div class="flex-grow-1">
                <div class="d-flex align-items-center gap-2 mb-2">
                    <h2 class="mb-0">@Model.Epic.Summary</h2>
                    <span class="badge bg-secondary">@Model.Epic.Key</span>
                </div>
                <div class="text-muted">
                    <a asp-controller="Projects" asp-action="Details" asp-route-id="@Model.Epic.ProjectId"
                       class="text-decoration-none">
                        <i class="bi bi-folder"></i> @Model.Epic.ProjectKey
                    </a>
                    <span class="mx-2">|</span>
                    <i class="bi bi-calendar"></i> Created @Model.Epic.CreatedAt.ToString("MMM dd, yyyy")
                    <span class="mx-2">|</span>
                    <i class="bi bi-clock"></i> Updated @Model.Epic.UpdatedAt.ToString("MMM dd, yyyy")
                </div>
            </div>
            <div class="btn-group">
                @if (Model.CanEdit)
                {
                    <a asp-action="Edit" asp-route-id="@Model.Epic.Id" class="btn btn-primary">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                }
                @if (Model.CanDelete)
                {
                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                }
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Back
                </a>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        @if (!string.IsNullOrWhiteSpace(Model.Epic.Description))
        {
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title"><i class="bi bi-info-circle"></i> Description</h5>
                    <p class="card-text">@Model.Epic.Description</p>
                </div>
            </div>
        }

        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="bi bi-list-task"></i> Work Items (@Model.WorkItems.Count)</h5>
                <a asp-controller="WorkItems" asp-action="Create" asp-route-epicId="@Model.Epic.Id"
                   asp-route-projectId="@Model.Epic.ProjectId" class="btn btn-sm btn-primary">
                    <i class="bi bi-plus-circle"></i> New Work Item
                </a>
            </div>
            @if (Model.WorkItems.Any())
            {
                <div class="list-group list-group-flush">
                    @foreach (var workItem in Model.WorkItems)
                    {
                        <a asp-controller="WorkItems" asp-action="Details" asp-route-id="@workItem.Id"
                           class="list-group-item list-group-item-action">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="flex-grow-1">
                                    <div class="d-flex align-items-center gap-2">
                                        @await Html.PartialAsync("_WorkItemTypeBadge", workItem.Type)
                                        <span class="fw-bold">@workItem.Summary</span>
                                    </div>
                                    <div class="d-flex align-items-center gap-2 mt-1">
                                        <small class="text-muted">@workItem.Key</small>
                                        <small><span class="badge bg-primary">@workItem.StatusName</span></small>
                                        @if (!string.IsNullOrWhiteSpace(workItem.AssigneeName))
                                        {
                                            <small>
                                                <span class="badge bg-light text-dark border">
                                                    <i class="bi bi-person-fill"></i> @workItem.AssigneeName
                                                </span>
                                            </small>
                                        }
                                    </div>
                                </div>
                                <div>
                                    @await Html.PartialAsync("_PriorityBadge", workItem.Priority)
                                </div>
                            </div>
                        </a>
                    }
                </div>
            }
            else
            {
                <div class="card-body">
                    <p class="text-muted mb-0">No work items yet. Create work items to track tasks and bugs for this epic.</p>
                </div>
            }
        </div>
    </div>

    <div class="col-md-4">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0"><i class="bi bi-info-square"></i> Details</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <strong>Status:</strong><br />
                    <span class="badge bg-primary mt-1">@Model.Epic.StatusName</span>
                </div>

                <div class="mb-3">
                    <strong>Assignee:</strong><br />
                    @if (!string.IsNullOrWhiteSpace(Model.Epic.AssigneeName))
                    {
                        <span class="badge bg-light text-dark border mt-1">
                            <i class="bi bi-person-fill"></i> @Model.Epic.AssigneeName
                        </span>
                    }
                    else
                    {
                        <span class="text-muted">Unassigned</span>
                    }
                </div>

                <div class="mb-3">
                    <strong>Priority:</strong><br />
                    <span class="mt-1 d-inline-block">@await Html.PartialAsync("_PriorityBadge", Model.Epic.Priority)</span>
                </div>

                @if (Model.Epic.StartDate.HasValue)
                {
                    <div class="mb-3">
                        <strong>Start Date:</strong><br />
                        <i class="bi bi-calendar-check"></i> @Model.Epic.StartDate.Value.ToString("MMM dd, yyyy")
                    </div>
                }

                @if (Model.Epic.DueDate.HasValue)
                {
                    var daysUntilDue = (Model.Epic.DueDate.Value.Date - DateTime.Today).Days;
                    var dueDateClass = daysUntilDue < 0 ? "text-danger" : (daysUntilDue <= 7 ? "text-warning" : "text-dark");
                    <div class="mb-3">
                        <strong>Due Date:</strong><br />
                        <span class="@dueDateClass">
                            <i class="bi bi-calendar"></i> @Model.Epic.DueDate.Value.ToString("MMM dd, yyyy")
                            @if (daysUntilDue < 0)
                            {
                                <small>(Overdue by @Math.Abs(daysUntilDue) days)</small>
                            }
                            else if (daysUntilDue <= 7)
                            {
                                <small>(Due in @daysUntilDue days)</small>
                            }
                        </span>
                    </div>
                }
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="bi bi-graph-up"></i> Progress</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="progress" style="height: 30px;">
                        <div class="progress-bar" role="progressbar"
                             style="width: @Model.CompletionPercentage%"
                             aria-valuenow="@Model.CompletionPercentage" aria-valuemin="0" aria-valuemax="100">
                            @Model.CompletionPercentage%
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-between">
                    <span><strong>Total:</strong> @Model.Epic.WorkItemCount</span>
                    <span><strong>Completed:</strong> @Model.Epic.CompletedWorkItemCount</span>
                </div>
            </div>
        </div>
    </div>
</div>

@* Delete Confirmation Modal *@
@if (Model.CanDelete)
{
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteModalLabel">
                        <i class="bi bi-exclamation-triangle"></i> Confirm Deletion
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this epic?</p>
                    <p class="fw-bold">@Model.Epic.Summary (@Model.Epic.Key)</p>
                    <p class="text-danger">
                        <i class="bi bi-exclamation-circle"></i>
                        This will affect all associated work items. This action cannot be undone!
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <form asp-action="Delete" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@Model.Epic.Id" />
                        <button type="submit" class="btn btn-danger">
                            <i class="bi bi-trash"></i> Delete Epic
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}
