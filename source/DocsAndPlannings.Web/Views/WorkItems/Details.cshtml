@model DocsAndPlannings.Web.ViewModels.WorkItems.WorkItemDetailsViewModel
@{
    ViewData["Title"] = Model.WorkItem.Key;
}

<div class="row">
    <div class="col-md-12">
        <div class="d-flex justify-content-between align-items-start mb-4">
            <div class="flex-grow-1">
                <div class="d-flex align-items-center gap-2 mb-2">
                    @await Html.PartialAsync("_WorkItemTypeBadge", Model.WorkItem.Type)
                    <h2 class="mb-0">@Model.WorkItem.Summary</h2>
                    <span class="badge bg-secondary">@Model.WorkItem.Key</span>
                </div>
                <div class="text-muted">
                    <a asp-controller="Projects" asp-action="Details" asp-route-id="@Model.WorkItem.ProjectId"
                       class="text-decoration-none">
                        <i class="bi bi-folder"></i> @Model.WorkItem.ProjectKey
                    </a>
                    @if (Model.WorkItem.EpicId.HasValue)
                    {
                        <span class="mx-2">|</span>
                        <a asp-controller="Epics" asp-action="Details" asp-route-id="@Model.WorkItem.EpicId"
                           class="text-decoration-none">
                            <i class="bi bi-diagram-2"></i> @Model.WorkItem.EpicKey
                        </a>
                    }
                    <span class="mx-2">|</span>
                    <i class="bi bi-calendar"></i> Created @Model.WorkItem.CreatedAt.ToString("MMM dd, yyyy")
                    <span class="mx-2">|</span>
                    <i class="bi bi-clock"></i> Updated @Model.WorkItem.UpdatedAt.ToString("MMM dd, yyyy")
                </div>
            </div>
            <div class="btn-group">
                @if (Model.CanEdit)
                {
                    <a asp-action="Edit" asp-route-id="@Model.WorkItem.Id" class="btn btn-primary">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                }
                @if (Model.CanDelete)
                {
                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                }
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Back
                </a>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        @if (!string.IsNullOrWhiteSpace(Model.WorkItem.Description))
        {
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title"><i class="bi bi-info-circle"></i> Description</h5>
                    <div class="card-text">@Html.Raw(Model.RenderedDescription)</div>
                </div>
            </div>
        }

        @if (Model.ChildWorkItems.Any())
        {
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="bi bi-list-nested"></i> Subtasks (@Model.ChildWorkItems.Count)</h5>
                    <a asp-action="Create" asp-route-parentWorkItemId="@Model.WorkItem.Id"
                       asp-route-projectId="@Model.WorkItem.ProjectId"
                       asp-route-epicId="@Model.WorkItem.EpicId"
                       asp-route-type="@((int)DocsAndPlannings.Core.Models.WorkItemType.Subtask)"
                       class="btn btn-sm btn-primary">
                        <i class="bi bi-plus-circle"></i> New Subtask
                    </a>
                </div>
                <div class="list-group list-group-flush">
                    @foreach (var childWorkItem in Model.ChildWorkItems)
                    {
                        <a asp-action="Details" asp-route-id="@childWorkItem.Id"
                           class="list-group-item list-group-item-action">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="flex-grow-1">
                                    <div class="fw-bold">@childWorkItem.Summary</div>
                                    <div class="d-flex align-items-center gap-2 mt-1">
                                        <small class="text-muted">@childWorkItem.Key</small>
                                        <small><span class="badge bg-primary">@childWorkItem.StatusName</span></small>
                                        @if (!string.IsNullOrWhiteSpace(childWorkItem.AssigneeName))
                                        {
                                            <small>
                                                <span class="badge bg-light text-dark border">
                                                    <i class="bi bi-person-fill"></i> @childWorkItem.AssigneeName
                                                </span>
                                            </small>
                                        }
                                    </div>
                                </div>
                                <div>
                                    @await Html.PartialAsync("_PriorityBadge", childWorkItem.Priority)
                                </div>
                            </div>
                        </a>
                    }
                </div>
            </div>
        }

        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="bi bi-chat-left-text"></i> Comments (@Model.Comments.Count)</h5>
            </div>
            @if (Model.Comments.Any())
            {
                <div class="list-group list-group-flush">
                    @foreach (var comment in Model.Comments)
                    {
                        <div class="list-group-item">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div>
                                    <strong>@comment.AuthorName</strong>
                                    <span class="text-muted">commented on @comment.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</span>
                                    @if (comment.IsEdited)
                                    {
                                        <span class="text-muted">(edited)</span>
                                    }
                                </div>
                            </div>
                            <p class="mb-0">@comment.Content</p>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="card-body">
                    <p class="text-muted mb-0">No comments yet. Be the first to comment!</p>
                </div>
            }
        </div>
    </div>

    <div class="col-md-4">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0"><i class="bi bi-info-square"></i> Details</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <strong>Status:</strong><br />
                    <span class="badge bg-primary mt-1">@Model.WorkItem.StatusName</span>
                </div>

                <div class="mb-3">
                    <strong>Assignee:</strong><br />
                    @if (!string.IsNullOrWhiteSpace(Model.WorkItem.AssigneeName))
                    {
                        <span class="badge bg-light text-dark border mt-1">
                            <i class="bi bi-person-fill"></i> @Model.WorkItem.AssigneeName
                        </span>
                    }
                    else
                    {
                        <span class="text-muted">Unassigned</span>
                    }
                </div>

                <div class="mb-3">
                    <strong>Reporter:</strong><br />
                    @if (!string.IsNullOrWhiteSpace(Model.WorkItem.ReporterName))
                    {
                        <span class="badge bg-light text-dark border mt-1">
                            <i class="bi bi-person"></i> @Model.WorkItem.ReporterName
                        </span>
                    }
                    else
                    {
                        <span class="text-muted">Unknown</span>
                    }
                </div>

                <div class="mb-3">
                    <strong>Priority:</strong><br />
                    <span class="mt-1 d-inline-block">@await Html.PartialAsync("_PriorityBadge", Model.WorkItem.Priority)</span>
                </div>

                @if (Model.WorkItem.DueDate.HasValue)
                {
                    var daysUntilDue = (Model.WorkItem.DueDate.Value.Date - DateTime.Today).Days;
                    var dueDateClass = daysUntilDue < 0 ? "text-danger" : (daysUntilDue <= 7 ? "text-warning" : "text-dark");
                    <div class="mb-3">
                        <strong>Due Date:</strong><br />
                        <span class="@dueDateClass">
                            <i class="bi bi-calendar"></i> @Model.WorkItem.DueDate.Value.ToString("MMM dd, yyyy")
                            @if (daysUntilDue < 0)
                            {
                                <small>(Overdue by @Math.Abs(daysUntilDue) days)</small>
                            }
                            else if (daysUntilDue <= 7)
                            {
                                <small>(Due in @daysUntilDue days)</small>
                            }
                        </span>
                    </div>
                }

                @if (Model.WorkItem.ParentWorkItemId.HasValue)
                {
                    <div class="mb-3">
                        <strong>Parent Work Item:</strong><br />
                        <a asp-action="Details" asp-route-id="@Model.WorkItem.ParentWorkItemId" class="text-decoration-none">
                            <span class="badge bg-info mt-1">@Model.WorkItem.ParentWorkItemKey</span>
                        </a>
                    </div>
                }
            </div>
        </div>

        @if (Model.WorkItem.Type != DocsAndPlannings.Core.Models.WorkItemType.Subtask)
        {
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-graph-up"></i> Activity</h5>
                </div>
                <div class="card-body">
                    <p><strong>Subtasks:</strong> @Model.WorkItem.ChildWorkItemCount</p>
                    <p class="mb-0"><strong>Comments:</strong> @Model.WorkItem.CommentCount</p>
                </div>
            </div>
        }
    </div>
</div>

@* Delete Confirmation Modal *@
@if (Model.CanDelete)
{
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteModalLabel">
                        <i class="bi bi-exclamation-triangle"></i> Confirm Deletion
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this work item?</p>
                    <p class="fw-bold">@Model.WorkItem.Summary (@Model.WorkItem.Key)</p>
                    <p class="text-danger">
                        <i class="bi bi-exclamation-circle"></i>
                        @if (Model.WorkItem.ChildWorkItemCount > 0)
                        {
                            <text>This work item has @Model.WorkItem.ChildWorkItemCount subtask(s). </text>
                        }
                        This action cannot be undone!
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <form asp-action="Delete" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@Model.WorkItem.Id" />
                        <button type="submit" class="btn btn-danger">
                            <i class="bi bi-trash"></i> Delete Work Item
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}
