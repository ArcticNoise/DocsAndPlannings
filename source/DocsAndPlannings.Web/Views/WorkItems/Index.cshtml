@using DocsAndPlannings.Core.Models
@model DocsAndPlannings.Web.ViewModels.WorkItems.WorkItemListViewModel
@{
    ViewData["Title"] = "Work Items";
}

<div class="row">
    <div class="col-md-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2><i class="bi bi-list-task"></i> Work Items</h2>
                <p class="text-muted">Track and manage tasks, bugs, and subtasks</p>
            </div>
            <div>
                <a asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> New Work Item
                </a>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <form asp-action="Index" method="get" class="row g-3">
                    <div class="col-md-6">
                        <label for="searchText" class="form-label">Search</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" id="searchText" name="searchText"
                                   value="@Model.SearchText" placeholder="Search by key, summary, or description..." />
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label for="projectId" class="form-label">Project</label>
                        <select class="form-select" id="projectId" name="projectId">
                            <option value="">All Projects</option>
                            @foreach (var project in Model.AvailableProjects)
                            {
                                <option value="@project.Id" selected="@(Model.SelectedProjectId == project.Id)">
                                    @project.Name (@project.Key)
                                </option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="type" class="form-label">Type</label>
                        <select class="form-select" id="type" name="type">
                            <option value="">All Types</option>
                            <option value="@((int)WorkItemType.Task)" selected="@(Model.SelectedType == WorkItemType.Task)">Task</option>
                            <option value="@((int)WorkItemType.Bug)" selected="@(Model.SelectedType == WorkItemType.Bug)">Bug</option>
                            <option value="@((int)WorkItemType.Subtask)" selected="@(Model.SelectedType == WorkItemType.Subtask)">Subtask</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="priority" class="form-label">Priority</label>
                        <select class="form-select" id="priority" name="priority">
                            <option value="">All Priorities</option>
                            <option value="1" selected="@(Model.SelectedPriority == 1)">1 - Highest</option>
                            <option value="2" selected="@(Model.SelectedPriority == 2)">2 - High</option>
                            <option value="3" selected="@(Model.SelectedPriority == 3)">3 - Medium</option>
                            <option value="4" selected="@(Model.SelectedPriority == 4)">4 - Low</option>
                            <option value="5" selected="@(Model.SelectedPriority == 5)">5 - Lowest</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="pageSize" class="form-label">Items per Page</label>
                        <select class="form-select" id="pageSize" name="pageSize">
                            <option value="25" selected="@(Model.PageSize == 25)">25</option>
                            <option value="50" selected="@(Model.PageSize == 50)">50</option>
                            <option value="100" selected="@(Model.PageSize == 100)">100</option>
                        </select>
                    </div>
                    <div class="col-md-6 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary me-2">
                            <i class="bi bi-funnel"></i> Filter
                        </button>
                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="bi bi-x-circle"></i> Clear Filters
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        @if (Model.HasWorkItems)
        {
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="text-muted">
                            Showing @Model.WorkItems.Count of @Model.TotalCount work items
                        </div>
                        @if (Model.TotalPages > 1)
                        {
                            <nav aria-label="Work items pagination">
                                <ul class="pagination mb-0">
                                    <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                                        <a class="page-link" asp-action="Index"
                                           asp-route-searchText="@Model.SearchText"
                                           asp-route-projectId="@Model.SelectedProjectId"
                                           asp-route-type="@Model.SelectedType"
                                           asp-route-priority="@Model.SelectedPriority"
                                           asp-route-pageNumber="@(Model.PageNumber - 1)"
                                           asp-route-pageSize="@Model.PageSize">
                                            Previous
                                        </a>
                                    </li>
                                    @for (int i = 1; i <= Model.TotalPages; i++)
                                    {
                                        <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                            <a class="page-link" asp-action="Index"
                                               asp-route-searchText="@Model.SearchText"
                                               asp-route-projectId="@Model.SelectedProjectId"
                                               asp-route-type="@Model.SelectedType"
                                               asp-route-priority="@Model.SelectedPriority"
                                               asp-route-pageNumber="@i"
                                               asp-route-pageSize="@Model.PageSize">
                                                @i
                                            </a>
                                        </li>
                                    }
                                    <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                                        <a class="page-link" asp-action="Index"
                                           asp-route-searchText="@Model.SearchText"
                                           asp-route-projectId="@Model.SelectedProjectId"
                                           asp-route-type="@Model.SelectedType"
                                           asp-route-priority="@Model.SelectedPriority"
                                           asp-route-pageNumber="@(Model.PageNumber + 1)"
                                           asp-route-pageSize="@Model.PageSize">
                                            Next
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        }
                    </div>

                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>Key</th>
                                    <th>Summary</th>
                                    <th>Project</th>
                                    <th>Epic</th>
                                    <th>Status</th>
                                    <th>Assignee</th>
                                    <th>Priority</th>
                                    <th>Due Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var workItem in Model.WorkItems)
                                {
                                    <tr>
                                        <td>
                                            @await Html.PartialAsync("_WorkItemTypeBadge", workItem.Type)
                                        </td>
                                        <td>
                                            <a asp-action="Details" asp-route-id="@workItem.Id" class="text-decoration-none">
                                                <strong>@workItem.Key</strong>
                                            </a>
                                        </td>
                                        <td>
                                            <a asp-action="Details" asp-route-id="@workItem.Id" class="text-decoration-none">
                                                @workItem.Summary
                                            </a>
                                        </td>
                                        <td>
                                            <span class="text-muted">-</span>
                                        </td>
                                        <td>
                                            <span class="text-muted">-</span>
                                        </td>
                                        <td>
                                            <span class="badge bg-primary">@workItem.StatusName</span>
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrWhiteSpace(workItem.AssigneeName))
                                            {
                                                <span class="badge bg-light text-dark border">
                                                    <i class="bi bi-person-fill"></i> @workItem.AssigneeName
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">
                                                    <i class="bi bi-person"></i> Unassigned
                                                </span>
                                            }
                                        </td>
                                        <td>
                                            @await Html.PartialAsync("_PriorityBadge", workItem.Priority)
                                        </td>
                                        <td>
                                            @if (workItem.DueDate.HasValue)
                                            {
                                                var daysUntilDue = (workItem.DueDate.Value.Date - DateTime.Today).Days;
                                                var dueDateClass = daysUntilDue < 0 ? "text-danger" : (daysUntilDue <= 7 ? "text-warning" : "text-muted");
                                                <span class="@dueDateClass">
                                                    @workItem.DueDate.Value.ToString("MMM dd")
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="card">
                <div class="card-body text-center py-5">
                    <i class="bi bi-list-task" style="font-size: 4rem; color: #ccc;"></i>
                    <h4 class="mt-3">No Work Items Found</h4>
                    <p class="text-muted">
                        @if (!string.IsNullOrWhiteSpace(Model.SearchText) || Model.SelectedProjectId.HasValue || Model.SelectedType.HasValue)
                        {
                            <text>Try adjusting your filters or </text>
                        }
                        else
                        {
                            <text>Get started by creating your first work item.</text>
                        }
                    </p>
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="bi bi-plus-circle"></i> Create Work Item
                    </a>
                </div>
            </div>
        }
    </div>
</div>
